class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class CustomLinkedList {
    private Node head;

    // Operation 1: add(X) - Add element X at the end of the list
    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
    }

    // Operation 2: add(X, i) - Add element X at index i
    public void addAtIndex(int data, int index) {
        Node newNode = new Node(data);
        if (index == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }

        Node current = head;
        for (int i = 0; i < index - 1; i++) {
            if (current == null) {
                throw new IndexOutOfBoundsException("Index out of range");
            }
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;
    }

     public void addAll(List<Integer> dataList) {
        for (int data : dataList) {
            addSorted(data);
        }
    }

    // Helper method to add an element to the list while maintaining the sorted order
    private void addSorted(int data) {
        Node newNode = new Node(data);

        if (head == null || head.data >= data) {
            newNode.next = head;
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null && current.next.data < data) {
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;
    }

    // Operation 3: remove(X) - Remove all occurrences of X from the list
    public void remove(int data) {
        Node current = head;

        while (current != null && current.data == data) {
            head = current.next;
            current = head;
        }

        while (current != null && current.next != null) {
            if (current.next.data == data) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
    }

    // Operation 4: list() - Display all elements
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Operation 5: reverse() - Reverse the linked list
    public void reverse() {
        Node prev = null;
        Node current = head;
        Node next = null;

        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        head = prev;
    }

    // Operation 6: find(X) - Returns the position of X in the list. Returns -1 if X does not exist in the list.
    public int find(int data) {
        Node current = head;
        int position = 0;

        while (current != null) {
            if (current.data == data) {
                return position;
            }
            current = current.next;
            position++;
        }

        return -1;
    }

    // Operation 7: toString() - Returns comma-separated elements from start to end
    public String toString() {
        StringBuilder result = new StringBuilder();
        Node current = head;

        while (current != null) {
            result.append(current.data).append(",");
            current = current.next;
        }

        if (result.length() > 0) {
            result.deleteCharAt(result.length() - 1); // Remove the trailing comma
        }

        return result.toString();
    }

    // Operation 8: isSorted() - Returns true if the list is sorted, else false
    public boolean isSorted() {
        Node current = head;

        while (current != null && current.next != null) {
            if (current.data > current.next.data) {
                return false;
            }
            current = current.next;
        }

        return true;
    }
}

public class Main {
    public static void main(String[] args) {
        CustomLinkedList linkedList = new CustomLinkedList();

        // Operation 1: add(X) - Add element X at the end of the list
        linkedList.add(5);
        linkedList.add(10);
        linkedList.add(15);

        // Operation 4: list() - Display all elements
        System.out.println("Linked List:");
        linkedList.display();

        // Operation 2: add(X, i) - Add element X at index i
        linkedList.addAtIndex(8, 1);

        // Operation 4: list() - Display all elements
        System.out.println("Linked List after adding at index 1:");
        linkedList.display();

        // Operation 3: remove(X) - Remove all occurrences of X from the list
        linkedList.remove(10);

        // Operation 4: list() - Display all elements
        System.out.println("Linked List after removing 10:");
        linkedList.display();

        // Operation 5: reverse() - Reverse the linked list
        linkedList.reverse();

        // Operation 4: list() - Display all elements
        System.out.println("Reversed Linked List:");
        linkedList.display();

        // Operation 6: find(X) - Returns the position of X in the list. Returns -1 if X does not exist in the list.
        int position = linkedList.find(8);
        System.out.println("Position of 8: " + position);

        // Operation 7: toString() - Returns comma-separated elements from start to end
        String listString = linkedList.toString();
        System.out.println("Linked List as String: " + listString);

        // Operation 8: isSorted() - Returns true if the list is sorted, else false
        boolean sorted = linkedList.isSorted();
        System.out.println("Is the linked list sorted? " + sorted);
    }
}

